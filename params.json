{"name":"Job4j","tagline":"Java framework to create batch job and workflow easily ","body":"It is not just another framework like JBatch/Spring Batch/Easy Batch. \r\njob4j will support various batch processing technologies on a single platform.\r\n\r\nAs of now it only supports BlockingQueue & ThreadPoolExecuter based solution.\r\n\r\nBasic Documentation:\r\n\r\n\t1. Each Job has 3 components: InputProducer, Task, OutputConsumer\r\n\t2. InputProducer & OutputConsumer are single threaded.\r\n\t3. Task is multithreaded, configured by maxThreadCount\r\n\t4. Jobs, JobGroups and JobFlow can be started/scheduled independently.\r\n\t5. Multiple Job can be added to a JobGroup which runs parallely.\r\n\t6. Multiple JobGroup can be added to a JobFlow which runs sequentially.\r\n\t7. If a JobFlow contains Jobs in its two adjacent JobGroup, where output of a Job in 1st JobGroup is of same type as input of another Job in next JobGroup, a JobPipe gets created automatically for data flow.  \r\n\t8. Developers just need to implement 3 Interfaces(1 method in each): InputProducer, Task, OutputConsumer\r\n\t9. Job can be controlled/monitored by web: http://localhost:8080/job4j-0.0.1/joblist\r\n\r\n\t\r\n\tIt's initial version of implementation...\r\n\tDesign can change to accomodate future implementations.\r\n\r\nEasy Configuration (currently using spring context file):\r\n\r\n\tTo create Job:\r\n\t----------\r\n    <bean id=\"job1InputProducer\" class=\"com.talentica.job4j.test.job1.Job1InputProducer\"/>\r\n    <bean id=\"job1Task\" class=\"com.talentica.job4j.test.job1.Job1Task\" scope=\"prototype\"/>\r\n    <bean id=\"job1OutputConsumer\" class=\"com.talentica.job4j.test.job1.Job1OutputConsumer\"/> \r\n \t\r\n  \t<bean id=\"testJob1\" class=\"com.talentica.job4j.impl.queue.QueueJob\">\r\n\t  \t<property name=\"name\" value=\"TestJob1\" />\r\n\t\t<property name=\"startCronSchedule\" value=\"0 * * * *\" />\r\n\t\t<property name=\"stopCronSchedule\" value=\"55 * * * *\" />\t\t\t\t\r\n\t\t<property name=\"timeZone\" value=\"IST\" />\r\n\t\t\r\n  \t\t<property name=\"inputProducer\" ref=\"job1InputProducer\" />\t\t\r\n\t  \t<property name=\"task\" ref=\"job1Task\" />\r\n\t\t<property name=\"outputConsumer\" ref=\"job1OutputConsumer\" />\t\r\n\t\t\r\n\t  \t<property name=\"maxThreadCount\" value=\"5\" />\r\n  \t\t<property name=\"threadSleepTime\" value=\"4000\" />\r\n\t</bean>\r\n\t----------\r\n\t\r\n\tTo create JobFlow:\r\n\t-----------------\r\n\t<bean id=\"jobGroup1\" class=\"com.talentica.job4j.model.JobGroup\">\r\n\t\t<property name=\"jobList\">\r\n\t\t\t<list>\r\n\t\t\t\t<ref bean=\"testJob1\"/>\r\n\t\t\t\t<ref bean=\"testJob2\"/>\r\n\t\t\t</list>\r\n\t\t</property>\r\n\t</bean>\r\n\t\r\n\t<bean id=\"jobGroup2\" class=\"com.talentica.job4j.model.JobGroup\">\r\n\t\t<property name=\"jobList\">\r\n\t\t\t<list>\r\n\t\t\t\t<ref bean=\"testJob3\"/>\r\n\t\t\t</list>\r\n\t\t</property>\r\n\t</bean>\r\n\t\r\n\t<bean id=\"jobFlow1\" class=\"com.talentica.job4j.model.JobFlow\">\r\n\t\t<property name=\"jobGroupList\">\r\n\t\t\t<list>\r\n\t\t\t\t<ref bean=\"jobGroup1\"/>\r\n\t\t\t\t<ref bean=\"jobGroup2\"/>\r\n\t\t\t</list>\r\n\t\t</property>\r\n\t</bean>\r\n\t-----------------\r\n\t\r\nDemo:\r\n\thttps://github.com/smsahu/job4j-demo\r\n\t\r\nPresentation:\r\n\thttps://speakerdeck.com/smsahu/job4j-overview\r\n\t\t\r\nFuture Works:\r\n\r\n\t1. Configure Job via DB\r\n\t2. Custom job4j XML Configuration (For non spring projects)\r\n\t3. Fork Join Implementation\r\n\t4. Map Reduce Implementation\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}